import React, { useRef, useState, useEffect } from 'react';
import { useTreeStore } from '@/store/tree-store';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { 
  Copy, 
  Download, 
  FileText,
  Code2,
  Maximize2,
  Minimize2
} from 'lucide-react';
import { cn } from '@/lib/utils';

interface CodeEditorProps {
  className?: string;
}

export const CodeEditor: React.FC<CodeEditorProps> = ({ className }) => {
  const { selectedFileId, parsedTree, updateFileContent } = useTreeStore();
  
  const [code, setCode] = useState('');
  const [language, setLanguage] = useState('javascript');
  const [isFullscreen, setIsFullscreen] = useState(false);
  const textareaRef = useRef<HTMLTextAreaElement>(null);
  
  // Find the selected file
  const selectedFile = React.useMemo(() => {
    if (!selectedFileId) return null;
    
    const findFileRecursive = (nodes: any[]): any => {
      for (const node of nodes) {
        if (node.id === selectedFileId && node.type === 'file') {
          return node;
        }
        if (node.children) {
          const found = findFileRecursive(node.children);
          if (found) return found;
        }
      }
      return null;
    };
    
    return findFileRecursive(parsedTree);
  }, [selectedFileId, parsedTree]);
  
  // Update code when selected file changes
  useEffect(() => {
    if (selectedFile) {
      setCode(selectedFile.content || getDefaultContent(selectedFile.name));
      setLanguage(detectLanguage(selectedFile.name));
    } else {
      setCode(`// Welcome to Code Editor
// Select a file from the tree structure to edit its content

function exampleFunction() {
  console.log("Hello, World!");
  return "This is a code editor";
}

const data = {
  name: "File Structure Editor",
  features: ["Parse", "Edit", "Download"],
  language: "TypeScript"
};

export default exampleFunction;`);
      setLanguage('javascript');
    }
  }, [selectedFile]);
  
  const getDefaultContent = (filename: string) => {
    const ext = filename.split('.').pop()?.toLowerCase();
    
    switch (ext) {
      case 'tsx':
      case 'jsx':
        return `import React from 'react';

interface ${filename.split('.')[0]}Props {
  // Add your props here
}

const ${filename.split('.')[0]}: React.FC<${filename.split('.')[0]}Props> = () => {
  return (
    <div>
      <h1>Hello from ${filename}</h1>
    </div>
  );
};

export default ${filename.split('.')[0]};`;
      
      case 'ts':
      case 'js':
        return `// ${filename}

export function ${filename.split('.')[0]}() {
  console.log('Hello from ${filename}');
}`;
      
      case 'css':
        return `/* ${filename} */

.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}`;
      
      case 'html':
        return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${filename.split('.')[0]}</title>
</head>
<body>
  <h1>Hello from ${filename}</h1>
</body>
</html>`;
      
      case 'json':
        return `{
  "name": "${filename.split('.')[0]}",
  "version": "1.0.0",
  "description": "Generated from File Structure Editor"
}`;
      
      case 'md':
        return `# ${filename.split('.')[0]}

This file was generated by the File Structure Editor.

## Features

- Edit content for each file
- Syntax highlighting
- Download as ZIP`;
      
      default:
        return `# ${filename}

This file was generated by the File Structure Editor.
Add your content here.`;
    }
  };
  
  const detectLanguage = (filename: string) => {
    const ext = filename.split('.').pop()?.toLowerCase();
    
    switch (ext) {
      case 'js':
      case 'jsx':
        return 'javascript';
      case 'ts':
      case 'tsx':
        return 'typescript';
      case 'py':
        return 'python';
      case 'html':
        return 'html';
      case 'css':
      case 'scss':
        return 'css';
      case 'json':
        return 'json';
      case 'md':
        return 'markdown';
      default:
        return 'plain';
    }
  };
  
  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newCode = e.target.value;
    setCode(newCode);
    
    // Save content to the selected file
    if (selectedFile) {
      updateFileContent(selectedFile.id, newCode);
    }
  };
  
  const handleCopy = async () => {
    try {
      await navigator.clipboard.writeText(code);
    } catch (err) {
      console.error('Failed to copy code:', err);
    }
  };
  
  const handlePaste = async () => {
    try {
      const text = await navigator.clipboard.readText();
      setCode(text);
    } catch (err) {
      console.error('Failed to paste code:', err);
    }
  };
  
  const handleDownload = () => {
    const blob = new Blob([code], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    const filename = selectedFile?.name || 'code.txt';
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };
  
  const languages = [
    { value: 'javascript', label: 'JavaScript' },
    { value: 'typescript', label: 'TypeScript' },
    { value: 'python', label: 'Python' },
    { value: 'html', label: 'HTML' },
    { value: 'css', label: 'CSS' },
    { value: 'json', label: 'JSON' },
    { value: 'markdown', label: 'Markdown' },
    { value: 'plain', label: 'Plain Text' }
  ];
  
  const getLineNumbers = () => {
    const lines = code.split('\n');
    return lines.map((_, index) => index + 1);
  };
  
  return (
    <div className={cn("h-full flex flex-col", isFullscreen && "fixed inset-0 z-50 bg-background", className)}>
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-border">
        <div className="flex items-center gap-3">
          <h3 className="font-semibold text-foreground">Code Editor</h3>
          {selectedFile ? (
            <div className="flex items-center gap-2">
              <Badge variant="secondary" className="gap-1">
                <Code2 className="h-3 w-3" />
                {selectedFile.name}
              </Badge>
              <Badge variant="outline" className="text-xs">
                {languages.find(l => l.value === language)?.label}
              </Badge>
            </div>
          ) : (
            <Badge variant="secondary" className="gap-1">
              <Code2 className="h-3 w-3" />
              No file selected
            </Badge>
          )}
        </div>
        
        <div className="flex items-center gap-1">
          <select
            value={language}
            onChange={(e) => setLanguage(e.target.value)}
            className="text-sm border border-border rounded px-2 py-1 bg-background text-foreground"
          >
            {languages.map(lang => (
              <option key={lang.value} value={lang.value}>
                {lang.label}
              </option>
            ))}
          </select>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={handlePaste}
            className="gap-2"
          >
            Paste
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={handleCopy}
            className="gap-2"
          >
            <Copy className="h-4 w-4" />
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={handleDownload}
            className="gap-2"
          >
            <Download className="h-4 w-4" />
          </Button>
          
          <Button
            variant="ghost"
            size="sm"
            onClick={() => setIsFullscreen(!isFullscreen)}
            className="gap-2"
          >
            {isFullscreen ? <Minimize2 className="h-4 w-4" /> : <Maximize2 className="h-4 w-4" />}
          </Button>
        </div>
      </div>
      
      {/* Editor */}
      <div className="flex-1 relative overflow-hidden">
        <div className="absolute inset-0 flex">
          {/* Line numbers */}
          <div className="w-12 bg-muted/30 border-r border-border p-2 text-xs font-mono text-muted-foreground select-none overflow-hidden">
            {getLineNumbers().map((lineNum) => (
              <div key={lineNum} className="text-right leading-6 h-6">
                {lineNum}
              </div>
            ))}
          </div>
          
          {/* Code area */}
          <div className="flex-1 relative">
            <textarea
              ref={textareaRef}
              value={code}
              onChange={handleCodeChange}
              placeholder={selectedFile ? `Edit ${selectedFile.name} content...` : "Select a file from the tree to edit its content..."}
              disabled={!selectedFile}
              className={cn(
                "w-full h-full resize-none",
                "font-mono text-sm leading-6",
                "bg-background text-foreground",
                "border-0 outline-none",
                "p-4 pl-2",
                "placeholder:text-muted-foreground",
                "transition-all duration-200",
                !selectedFile && "opacity-50 cursor-not-allowed"
              )}
              spellCheck={false}
              style={{
                tabSize: 2,
                whiteSpace: 'pre'
              }}
            />
          </div>
        </div>
      </div>
      
      {/* Footer */}
      <div className="p-4 border-t border-border">
        <div className="flex items-center justify-between text-xs text-muted-foreground">
          <div className="flex items-center gap-4">
            <span>{code.length} characters</span>
            <span>{code.split('\n').length} lines</span>
            <span>{code.split(/\s+/).filter(word => word.length > 0).length} words</span>
          </div>
          <div className="flex items-center gap-2">
            <FileText className="h-4 w-4" />
            <span>Code Editor</span>
          </div>
        </div>
      </div>
    </div>
  );
};